//Push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//Pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
//Push constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
//Pop that 0
@THAT
D=M
@0
D=A+D
@SP
A=M
M=D
@SP
AM=M-1
D=M
@SP
A=M+1
A=M
M=D
//Push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//Pop that 1
@THAT
D=M
@1
D=A+D
@SP
A=M
M=D
@SP
AM=M-1
D=M
@SP
A=M+1
A=M
M=D
//Push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//Push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//Pop argument 0
@ARG
D=M
@0
D=A+D
@SP
A=M
M=D
@SP
AM=M-1
D=M
@SP
A=M+1
A=M
M=D
//Label
(MAIN_LOOP_START)
//Push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//If-goto
@SP
AM=M-1
D=M
@COMPUTE_ELEMENT
D;JNE
//Goto
@END_PROGRAM
D;JMP
//Label
(COMPUTE_ELEMENT)
//Push that 0
@THAT
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//Push that 1
@THAT
D=M
@1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//Pop that 2
@THAT
D=M
@2
D=A+D
@SP
A=M
M=D
@SP
AM=M-1
D=M
@SP
A=M+1
A=M
M=D
//Push pointer 1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
//Push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//Pop pointer 1
@SP
AM=M-1
D=M
@THAT
M=D
//Push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//Push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//Pop argument 0
@ARG
D=M
@0
D=A+D
@SP
A=M
M=D
@SP
AM=M-1
D=M
@SP
A=M+1
A=M
M=D
//Goto
@MAIN_LOOP_START
D;JMP
//Label
(END_PROGRAM)
