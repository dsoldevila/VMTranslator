//BootStrap Code
@256
D=A
@SP
M=D
@Sys.init
D;JMP
//Function Main.fibonacci 0
(Main.fibonacci)
//Push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//Push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
AM=M-1
D=M
@SP
AM=M-1
D=M-D
M=0
@FibonacciElement.Main.fibonacci$LABEL_0
D;JGE
@SP
A=M
M=-1
(FibonacciElement.Main.fibonacci$LABEL_0)
@SP
M=M+1
//If-goto
@SP
AM=M-1
D=M
@FibonacciElement.Main.fibonacci$IF_TRUE
D;JNE
//Goto
@Main.fibonacci$IF_FALSE
D;JMP
//Label
(Main.fibonacci$IF_TRUE)
//Push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//Return
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
//Pop temp 0
@SP
AM=M-1
D=M
@5
M=D
@5
D=M
D=D-A
A=D
D=M
@6
M=D
//Pop argument 0
@ARG
D=M
@0
D=A+D
@SP
A=M
M=D
@SP
AM=M-1
D=M
@SP
A=M+1
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
//r_that
@5
D=M
@1
A=D-A
D=M
@THAT
M=D
//r_this
@5
D=M
@2
A=D-A
D=M
@THIS
M=D
//r_arg
@5
D=M
@3
A=D-A
D=M
@ARG
M=D
//r_lcl
@5
D=M
@4
A=D-A
D=M
@LCL
M=D
@6
A=M
D;JMP
//Label
(Main.fibonacci$IF_FALSE)
//Push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//Push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//Call Main.fibonacci 1  
@Main.fibonacci$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1  
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
D;JMP
(Main.fibonacci$ret.1)
//Push argument 0
@ARG
D=M
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
//Push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
//Call Main.fibonacci 1  
@Main.fibonacci$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1  
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
D;JMP
(Main.fibonacci$ret.2)
//add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//Return
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
//Pop temp 0
@SP
AM=M-1
D=M
@5
M=D
@5
D=M
D=D-A
A=D
D=M
@6
M=D
//Pop argument 0
@ARG
D=M
@0
D=A+D
@SP
A=M
M=D
@SP
AM=M-1
D=M
@SP
A=M+1
A=M
M=D
@ARG
D=M
@1
D=D+A
@SP
M=D
//r_that
@5
D=M
@1
A=D-A
D=M
@THAT
M=D
//r_this
@5
D=M
@2
A=D-A
D=M
@THIS
M=D
//r_arg
@5
D=M
@3
A=D-A
D=M
@ARG
M=D
//r_lcl
@5
D=M
@4
A=D-A
D=M
@LCL
M=D
@6
A=M
D;JMP
//Function Sys.init 0
(Sys.init)
//Push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//Call Main.fibonacci 1   
@Sys.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@1   
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
D;JMP
(Sys.init$ret.1)
//Label
(Sys.init$WHILE)
//Goto
@Sys.init$WHILE
D;JMP
